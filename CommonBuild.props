<Project>
    <PropertyGroup>
        <AppDataRoamingVSDir>$([System.Environment]::GetFolderPath(SpecialFolder.ApplicationData))\VintagestoryData</AppDataRoamingVSDir>
        <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
        <!-- This should get the latest version you have installed on Windows.
        Additionally it doesn't overwrite if it doesn't exist for linux users.  -->
        <VS_IN_REG>$(registry:HKEY_CURRENT_USER\SOFTWARE\Anego Studios\Vintage Story@InstallPath)</VS_IN_REG>
        <VINTAGE_STORY Condition="'$(VS_IN_REG)' != ''">$(VS_IN_REG)</VINTAGE_STORY>
        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Krafs.Publicizer" Version="2.3.0"/>
    </ItemGroup>

    <ItemGroup>
        <Reference Include="VintagestoryAPI">
            <HintPath>$(VINTAGE_STORY)/VintagestoryAPI.dll</HintPath>
            <Private>false</Private>
        </Reference>
        <Reference Include="VSSurvivalMod">
            <HintPath>$(VINTAGE_STORY)/Mods/VSSurvivalMod.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="VSEssentials">
            <HintPath>$(VINTAGE_STORY)/Mods/VSEssentials.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="VSCreativeMod">
            <HintPath>$(VINTAGE_STORY)/Mods/VSCreativeMod.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="Newtonsoft.Json">
            <HintPath>$(VINTAGE_STORY)/Lib/Newtonsoft.Json.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="0Harmony">
            <HintPath>$(VINTAGE_STORY)/Lib/0Harmony.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="VintagestoryLib">
            <HintPath>$(VINTAGE_STORY)/VintagestoryLib.dll</HintPath>
            <Private>false</Private>
        </Reference>
        <Reference Include="protobuf-net">
            <HintPath>$(VINTAGE_STORY)/Lib/protobuf-net.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="System.Collections.Immutable">
            <HintPath>$(VINTAGE_STORY)/Lib/System.Collections.Immutable.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="cairo-sharp">
            <HintPath>$(VINTAGE_STORY)/Lib/cairo-sharp.dll</HintPath>
            <Private>False</Private>
        </Reference>
        <Reference Include="Microsoft.Data.Sqlite">
            <HintPath>$(VINTAGE_STORY)/Lib/Microsoft.Data.Sqlite.dll</HintPath>
            <Private>False</Private>
        </Reference>
    </ItemGroup>


    <Target Name="ImportLocalModReferences"
            Condition="'@(OutputReference)' != ''"
            BeforeTargets="ResolveReferences">

        <PropertyGroup>
            <AbsoluteIntermediateOutput>$(ProjectDir)$(IntermediateOutputPath)</AbsoluteIntermediateOutput>
        </PropertyGroup>
        <ItemGroup>
            <OutputModPackages Include="@(OutputReference)">
                <!-- For each mod, we expect the downloaded zip to be named as below and unzipped into a folder with the same name -->
                <ActualModPath>$(AppDataRoamingVSDir)\Development\%(Identity).zip</ActualModPath>
                <UnzipFolder>$(AbsoluteIntermediateOutput)/ModRefs/%(Identity)-LOCALDB</UnzipFolder>
            </OutputModPackages>
        </ItemGroup>
        
        <RemoveDir Condition="Exists('%(OutputModPackages.UnzipFolder)')"
                   Directories="%(OutputModPackages.UnzipFolder"/>
        <Unzip SourceFiles="%(OutputModPackages.ActualModPath)"
               DestinationFolder="%(OutputModPackages.UnzipFolder)" />
        <ItemGroup>
            <LocalModAssemblies Include="%(OutputModPackages.UnzipFolder)\**\*.dll" />
            <ReferencePath Include="@(LocalModAssemblies)" />
        </ItemGroup>
    </Target>
    
    <Target Name="ExportAfterBuild" AfterTargets="Build" Condition="Exists($(AppDataRoamingVSDir))">
        <ItemGroup>
            <AlreadyExistingDlls Include="$(VINTAGE_STORY)\**\*.dll"/>
            <FilterExistingDlls Include="$([System.IO.Path]::GetFileName('%(AlreadyExistingDlls.Identity)'))"/>
        </ItemGroup>
        <PropertyGroup>
            <OutputLocation Condition="'$(OutputLocation)' == ''">Client</OutputLocation>
            <IsBothLocations Condition="'$(OutputLocation)' != 'Client' and '$(OutputLocation)' != 'Server'">true</IsBothLocations>
            <OutputLocation Condition="'$(IsBothLocations)' == 'true'">Client</OutputLocation>
        </PropertyGroup>
        <MakeDir Directories="$(AppDataRoamingVSDir)\Development\$(OutputLocation)" Condition="!Exists('$(AppDataRoamingVSDir)\Development\$(OutputLocation)')"/>
        
        <Delete Files="$(OutputPath)/%(FilterExistingDlls.Identity)"/>
        
        <ZipDirectory Overwrite="true" DestinationFile="$(AppDataRoamingVSDir)\Development\$(OutputLocation)\$(AssemblyName).zip" SourceDirectory="$(OutputPath)"/>
        <ZipDirectory Overwrite="true" Condition="'$(IsBothLocations)' == 'true'" DestinationFile="$(AppDataRoamingVSDir)\Development\Server\$(AssemblyName).zip" SourceDirectory="$(OutputPath)"/>
    </Target>
    
</Project>